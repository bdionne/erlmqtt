#! /usr/bin/env escript
%%! -noinput -pa ./ebin -pa deps/getopt/ebin

-define(OPTS,
        [
         {help, undefined, "help", boolean,
          "Display usage information and exit"},
         {host, $h, "host", {string, "localhost"},
          "MQTT server hostname or IP address"},
         {port, $p, "port", {integer, 1883},
          "MQTT server port number"},
         {password, $P, "passwd", {string, "guest"},
          "Password for authentication"},
         {username, $u, "user", {string, "guest"},
          "Username for authentication"},
         {qos_level, $q, "qos", {integer, 0},
          "QoS for subscriptions"}
        ]).

main(Argv) ->
    {ok, {Opts, Topics}} = getopt:parse(?OPTS, Argv),
    case proplists:get_value(help, Opts) of
        true ->
            ScriptPath = escript:script_name(),
            Script = filename:basename(ScriptPath),
            ArgString = "<topic> ...",
            HelpString = [{["<topic>"], "A topic to subscribe to"}],
            getopt:usage(?OPTS, Script, ArgString, HelpString),
            halt(0);
        _ ->
            ok
    end,
    [Host, Port, User, Passwd, QosInt] =
        [proplists:get_value(K, Opts) ||
            K <- [host, port, username, password, qos_level]],
    {ok, C} = erlmqtt:open_clean({Host, Port}, [{username, User},
                                                {password, Passwd}]),
    QoS = erlmqtt:qos_symbol(QosInt),
    io:format("Subscribing to ~tp~n", [Topics]),
    erlmqtt:subscribe(C, [{T, QoS} || T <- Topics]),
    recv().

recv() ->
    {_T, Msg} = erlmqtt:recv_message(),
    io:format("~s~n", [Msg]),
    recv().
